Dokumentation grupp Gullviva, Testning

https://github.com/fransnl/Padel

Delaktiga: Frans Nilsson Lidström, Sophie Lindström, Ghasem Soltani och Pontus Hedman

Vi har alla varit delaktiga i alla delar av projektet och jobbat med testerna som en grupp.
Vi har arbetat på plats i skolan under den avsedda tiden, samt över discord där en har skärmdelat
så att vi alla tillsammans har kunnat diskutera hur testerna skulle utföras.

Vi började med klassen Score, därefter Player, Game, Set och till slut Match. Vi valde den här ordningen eftersom
vi ansåg att det var det bästa sättet att testa de olika klasserna, och därmed med säkerhet veta att om ett test
kom tillbaka fel så låg inte felet i de underliggande klasserna.

Klass Score:

Till en början ändrade vi denna klass eftersom poängen i padel fungerar så att om en spelare vinner de första
två bollarna i ett game tilldelas 15 poäng till spelaren, och efter det tilldelas 10 poäng per vunnen boll. Men eftersom 
de andra klasserna använder samma klass för att hålla reda på poäng som endast ökar med 1 poäng per vinst 
så ändrade vi tillbaka det. Om en person skriver en klass som innehåller game-loopen konverteras de poängen 
i ett game där.

Vi fick inga fel när vi testade denna klass så inget är ändrat.

Klass Player:

I denna klass fick vi en ObjectNullReference i PlayerPointScoreTest() eftersom vi inte instantierade ett nytt 
objekt av Score. Vi fixade detta genom att ändra i klassen Player, där vi på rad 8 la till "= new Score();" 

Vi testade även PlayerNameTest(), om en string in parametern sparades i Player.Name på rätt sätt genom att kolla
om Player.Name var null, empty och om den var lika med en string som vi la som in-parameter i konstruktorn.
Vi fick inga fel i detta test.

Klass Game:

Vi ändrade _player1 och _player2 till properties så att vi kunde använda dem i testet. 
Vi testade först konstruktorn, om de Player-instanserna vi använde som in-parametrar stämde överens med att  
tilldelades till _player1 och _player2 i klassen. Vi fick ett fel som innebar att den andra Player-instansen i 
konstruktorn inte stämde överens med _player2. Vi fixade detta genom att ändra så att _player2 = player2 i stället 
för _player1 = player2.

Vi testade Point(), Score() och ScoreString genom att testa att Point() gav poäng till vardera Player och sedan
kollade om det Score() och ScoreString() returnerade stämde överens. Vi fick ObjectNullReferenceException på båda.
Vi fixade detta genom att ändra i Point() så att den kör Player.Point() för den player vi tar som in parameter
i stället för endast _player1. Vi la till en in-parameter för en player i Score() och gjorde likadant där.
Vi ändrade även ScoreString så att en spelare vinner över 3 poäng.

Vi testade till sist om ScoreString() returnerar en string, om den är inte null eller om den inte är emty, vi fick inget
fel på det testet.

Klass Set:

Vi gjorde _games till en property för att använda den i testet. Vi testade Set.Point genom att ge poäng till en 
player och sedan till båda i samma set. Vi gjorde detta för att vi ansåg att båda spelarna inte kan få poäng i 
samma set. Vi fick OutOfRangeException på båda testerna, vi fixade detta genom att skapa en konstruktor som
specificerade att det skulle vara 6 platser i listan, konstruktorn tar två players som inparametrar och lägger 
till dem i varje game i listan _game. Sedan sparar vi spelarna i vardera fieldvariabel.
Sedan testade vi konstruktorn i två tester, första genom att kolla om det är 6 platser i listan och andra om
de players vi tar som in-parametrar stämmer överens med de vi sparat. Vi fick inga fel på dessa tester.

Klass Match:

Vi gjorde _sets till en property för att kunna använda den i testerna. Även här ändrade vi så att inte båda spelarna kunde
få poäng i samma set. Vi testade om listan hade lika många platser som de sets vi specificerade i in-parametern,
om spelarna vi hade som in-parametrar stämde överens, om båda spelarna kunde få poäng i samma set
och om MatchScore() returnerade ett nytt score som vi kunde öka på poängen med. Vi fick inga fel eftersom vi ändrade 
logiken i Match.Point(), baserat på vår erfarenhet från